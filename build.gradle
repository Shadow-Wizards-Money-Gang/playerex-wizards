import org.jetbrains.kotlin.gradle.tasks.KotlinCompile

plugins {
	id 'fabric-loom' version "1.7-SNAPSHOT"
	id 'maven-publish'
	id "org.jetbrains.kotlin.jvm" version "2.0.0"
	id 'org.jetbrains.kotlin.plugin.serialization' version '2.0.0'
	id("com.google.devtools.ksp") version "2.0.0-1.0.21"
}

version = project.mod_version
group = project.maven_group

base {
	archivesName = project.archives_base_name
}

repositories {
	mavenCentral()
	maven {
		name = "wispForestReleases"
		url = uri("https://maven.wispforest.io/releases")
	}
	maven {
		name = "Ladysnake Mods"
		url = 'https://maven.ladysnake.org/releases'
	}
	maven {
		name = "Modrinth"
		url = "https://api.modrinth.com/maven"
	}
	maven {
		name = "Nucleoid"
		url = "https://maven.nucleoid.xyz/"
	}
	maven {
		url = "https://maven.kosmx.dev/"
	}
	maven {
		name = 'ParchmentMC'
		url = 'https://maven.parchmentmc.org'
	}
	maven {
		name = 'Quilt'
		url = "https://maven.quiltmc.org/repository/release/"
	}
}

loom {
    splitEnvironmentSourceSets()

	mods {
		"playerex-directors-cut" {
			sourceSet sourceSets.main
			sourceSet sourceSets.client
		}
	}
}

dependencies {
	minecraft "com.mojang:minecraft:${project.minecraft_version}"

	mappings loom.layered() {
		mappings("org.quiltmc:quilt-mappings:${project.minecraft_version}+build.${project.quilt_mappings_version}:intermediary-v2")
		officialMojangMappings()
		parchment("org.parchmentmc.data:parchment-${project.parchment_version}@zip")
	}

	modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

	modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"
	modImplementation "net.fabricmc:fabric-language-kotlin:${project.fabric_kotlin_version}"

	// in-house
	modImplementation("maven.modrinth:data-attributes-directors-cut:${project.data_attributes_version}")
	modImplementation include("maven.modrinth:opc-directors-cut:${project.opc_version}")

	// Cardinal Components
	modImplementation include("dev.onyxstudios.cardinal-components-api:cardinal-components-base:${project.cardinal_components_version}")
	modImplementation include("dev.onyxstudios.cardinal-components-api:cardinal-components-entity:${project.cardinal_components_version}")
	modImplementation include("dev.onyxstudios.cardinal-components-api:cardinal-components-chunk:${project.cardinal_components_version}")
	modImplementation include("dev.onyxstudios.cardinal-components-api:cardinal-components-level:${project.cardinal_components_version}")

	modImplementation include("maven.modrinth:AdditionalEntityAttributes:${project.additional_entity_attributes_version}")
	modImplementation("maven.modrinth:ranged-weapon-api:${project.ranged_weapon_api_version}")

	modImplementation include("io.wispforest:endec:${project.endec_version}")
	modImplementation include("io.wispforest.endec:gson:${project.endec_gson_version}")
	modImplementation include("io.wispforest.endec:netty:${project.endec_netty_version}")

	// owo
	annotationProcessor modImplementation("io.wispforest:owo-lib:${project.owo_version}")
	include "io.wispforest:owo-sentinel:${project.owo_version}"

	implementation("com.google.devtools.ksp:symbol-processing-api:${project.ksp_version}")
	implementation("com.squareup:kotlinpoet-ksp:${project.kotlinpoet_version}")
	ksp("dev.kosmx.kowoconfig:ksp-owo-config:${project.ksp_owo_config_version}")

	modImplementation include("eu.pb4:placeholder-api:${project.placeholder_api_version}")

	implementation include("net.objecthunter:exp4j:${project.exp4j_version}")

	include(implementation(annotationProcessor("io.github.llamalad7:mixinextras-fabric:${project.mixinextras_version}")))
}

processResources {
	inputs.property "version", project.version

	filesMatching("fabric.mod.json") {
		expand "version": project.version
	}
}

tasks.withType(JavaCompile).configureEach {
	it.options.release = 17
}

tasks.withType(KotlinCompile).configureEach {
	kotlinOptions {
		jvmTarget = 17
	}
}

java {
	// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
	// if it is present.
	// If you remove this line, sources will not be generated.
	withSourcesJar()

	sourceCompatibility = JavaVersion.VERSION_17
	targetCompatibility = JavaVersion.VERSION_17
}

jar {
	from("LICENSE") {
		rename { "${it}_${project.base.archivesName.get()}"}
	}
}

// configure the maven publication
publishing {
	publications {
		mavenJava(MavenPublication) {
			from components.java
		}
	}

	repositories {

	}
}